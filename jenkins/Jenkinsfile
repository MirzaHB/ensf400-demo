pipeline {
    agent any

    environment {
        HTTP_PROXY = 'http://127.0.0.1:9888'
        IMAGE_NAME = 'mirzahb/crossplatformimg'
    }

    stages {

        stage('Check Java Version') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh 'java --version'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew clean assemble'
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew test'
                    }
                }
            }
            post {
                always {
                    junit 'build/test-results/test/*.xml'
                }
            }
        }

        stage('Database Tests') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew integrate'
                    }
                }
            }
            post {
                always {
                    junit 'build/test-results/integrate/*.xml'
                }
            }
        }

        stage('BDD Tests') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew generateCucumberReports'
                        sh './gradlew jacocoTestReport'
                    }
                }
            }
            post {
                always {
                    junit 'build/test-results/bdd/*.xml'
                }
            }
        }

        stage('Static Analysis') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew sonarqube'
                        sleep 5
                        sh './gradlew checkQualityGate'
                    }
                }
            }
        }

        stage('Deploy to Test') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew deployToTestWindowsLocal'
                        sh 'PIPENV_IGNORE_VIRTUALENVS=1 pipenv install'
                        sh './gradlew waitForHeartBeat'
                        sh 'curl http://zap/JSON/core/action/newSession -s --proxy localhost:9888'
                    }
                }
            }
        }

        stage('API Tests') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew runApiTests'
                    }
                }
            }
            post {
                always {
                    junit 'build/test-results/api_tests/*.xml'
                }
            }
        }

        stage('UI BDD Tests') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew runBehaveTests'
                        sh './gradlew generateCucumberReport'
                    }
                }
            }
            post {
                always {
                    junit 'build/test-results/bdd_ui/*.xml'
                }
            }
        }

        stage('UI Tests') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh 'cd src/ui_tests/java && ./gradlew clean test'
                    }
                }
            }
            post {
                always {
                    junit 'src/ui_tests/java/build/test-results/test/*.xml'
                }
            }
        }

        stage('Security: Dependency Analysis') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew dependencyCheckAnalyze'
                    }
                }
            }
        }

        stage('Performance Tests') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew runPerfTests'
                    }
                }
            }
        }

        stage('Mutation Tests') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew pitest'
                    }
                }
            }
        }

        stage('Build Documentation') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh './gradlew javadoc'
                    }
                }
            }
        }

        stage('Collect Zap Security Report') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh 'mkdir -p build/reports/zap'
                        sh 'curl http://zap/OTHER/core/other/htmlreport --proxy localhost:9888 > build/reports/zap/zap_report.html'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            when {
                branch 'master'
            }
            steps {
                script {
                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.IMAGE_TAG = commitHash
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh "docker build -it ${IMAGE_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            when {
                branch 'master'
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                            sh '''
                                echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                                docker push ${IMAGE_NAME}:${IMAGE_TAG}
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy to Prod') {
            steps {
                script {
                    docker.image('openjdk:11-jdk').inside("--privileged --user root -v /var/run/docker.sock:/var/run/docker.sock") {
                        sh 'sleep 5'
                    }
                }
            }
        }
    }
}
